version: "3.9"

networks:
  monitor: # It is of type bridge meaning it will only connect to the host via specified ports.

volumes:
  prometheus-data: {}
  grafana-data: {} # docker creates it somewhere to remember diagram and tables

services:
  node-exporter:
    image: prom/node-exporter:v1.2.2
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro # ro stands for read only
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: # we inform node_exporter where to find the mentioned files
      - '--path.procfs=/host/proc' # procfs is in /host/proc
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      # execlude all folders in root but sys|proc|dev|host|etc
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports: # for test purposes
      - "9100:9100"
    networks:
      - monitor # the network we defined above

  prometheus:
    image: prom/prometheus:v2.31.1
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus # to let prometheus save database data to
      # local machine without letting them vanish in case it is restarted
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus" # save database data to /prometheus container
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=24h" # the data will be saved in 24 hours
      - "--web.enable-lifecycle" # to save the configuration when doing page reload
    networks:
      - monitor
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:8.2.4
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - monitor
    ports:
      - "3000:3000"

  prod:
    # image: bashikr/microblog:latest
    build:
      context: .
      dockerfile: docker/Dockerfile_prod
    container_name: "microblog-prod"
    links:
      - dbserver
    ports:
        - "5000:5000"
    restart: "unless-stopped"
    environment:
      MYSQL_DATABASE: microblog
      SECRET_KEY: secret
  dbserver:
    image: mysql:5.7
    container_name: "dbserver"
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
      MYSQL_USER: microblog
      MYSQL_DATABASE: microblog
      MYSQL_PASSWORD: secret
      DATABASE_URL: mysql+pymysql://microblog:secret@dbserver/microblog
    restart:
      "unless-stopped"
  test:
    container_name: "test-prod"
    build:
      context: .
      dockerfile: ./docker/Dockerfile_test
    volumes:
      - .:/home/microblog
    restart:
      "unless-stopped"
    environment:
      SECRET_KEY: development
      DATABASE_URL: mysql+pymysql://microblog:secret@dbserver/microblog